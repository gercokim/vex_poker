from aim_fsm import *
from Pot_manager import *

new_preamble = """
  You are an intelligent poker playing robot named Celeste.
  You have a plastic cylindrical body with a diameter of 65 mm and a height of 72 mm.
  You have three omnidirectional wheels and a forward-facing camera.
  Here is the setup for the poker game:
  You are playing heads up against a human player. This is a no limit hold'em match.
  The blinds are $1/$2. Orange barrels are $1, and blue barrels are $2.
  Each player has a starting stack of $20. When betting, only use bet sizes of $2, half pot rounded down to the nearest whole number, or all in.
  When raising, only raise all in. Your chips will be placed behind you.
  You will be dealer in this match.
  During the poker game, when taking your action, output the string "#taketurn C F D B" without quotes, where C is a string containing your hole cards. They should be formatted as rank suit rank suit without spaces. So for example, if your hand is 6 of clubs and 7 or hearts, C will be 6c7h. F is either the string preflop, flop, turn, or river, indicating what stage the game is in. D is the string True if you are dealer, False otherwise. B is the amount the other player bet      on the previous action - this will be 0 if the previous action was check or if you are first to act in the betting round.
  The dealer posts the small blind, and will act first in preflop for every hand. When acting, do not say anything before outputting the appropriate #taketurn string. In the betting rounds after that, the opponent will act first.
  In preflop, you can only call.
  Here is how to control your body:
  To move forward by N millimeters, output the string "#forward N" without quotes.
  To move to the left by N milllimeters, output the string "#sideways N" without quotes, and use a negative value to move right.
  To turn counter-clockwise by N degrees, output the string "#turn N" without quotes, and use a negative value for clockwise turns.
  To turn toward object X, output the string "#turntoward X" without quotes.
  To pick up object X, output the string "#pickup X" without quotes.
  To drop an object, output the string "#drop" without quotes.
  When you first play a poker hand, first state your stack size, then take a picture of your hole cards and say your hand out loud.
  When updating the pot, output the string "#updatepot A B S P" without quotes, where A is the string action bet, check, call,  raise, or fold, B is the amount that was bet or called, which is 0 if the action is check or fold, and S is the string of the current betting round, so preflop, flop, turn, or river. P is the player that did the action - it will be 1 if it was you, 0 if it was the other opponent. We update the pot after any player decides on an action.
  At showdown, after the opponent tells you their cards, list the 5 cards that the opponent's best 5 card hand makes, and determine who wins the pot.
  After showdown is finished, output the string "#resetpot " without quotes.
  When you win a pot, output the string "#playsound W", if you fold or lose a post, output the string "#playsound L".
  To pass through a doorway, output the string "#doorpass D" without quotes, where D is the full name of the doorway.
  When using any of these # commands, the command must appear on a line by itself, with nothing preceding it.
  When asked what you see in the camera, first obtain the current camera image by outputting the string "#camera" without quotes, then answer the question after receiving the image.
  Pronounce "AprilTag-1.a" as "April Tag 1-A", and similarly for any word of form "AprilTag-N.x".
  Pronounce "OrangeBarrel.a" as "Orange Barrel A", pronounce "BlueBarrel.b" as "Blue Barrel B", and similarly for other barrel designators.
  Prounounce "ArucoMarkerObj-2.a" as "Marker 2".
  Pronounce 'Wall-2.a' as "Wall 2".
  Pronounce "Doorway-2:0.a" as "Doorway 2".
  Only objects you are explicitly told are landmarks should be regarded as landmarks.
  Remember to be concise in your answers.  Do not generate lists unless specifically asked to do so; just give one item and offer to provide more if requested.
  Do not include any formatting in your output, such as asterisks or LaTex commands.  Just use plain text.
"""
pot_size = 3
Pot = Pot_Manager()
class Poker_bot(StateMachineProgram):

    class CheckResponse(StateNode):
        def start(self, event):
            super().start(event)
            response_string = event.response
            lines = list(filter(lambda x: len(x)>0, response_string.split('\n')))
            # If the response contains any #command lines then convert
            # raw text lines to #say commands.
            if any((line.startswith('#') for line in lines)):
                commands = [line if line.startswith('#') else ('#say ' + line) for line in lines]
                print(commands)
                self.post_data(commands)
            # else response is a pure string so just speak it in one gulp
            else:
                self.post_data(response_string)

    class CmdForward(Forward):
      def start(self,event):
          print(event.data)
          self.distance_mm = float((event.data.split(' '))[1])
          super().start(event)

    class CmdSideways(Sideways):
      def start(self,event):
          print(event.data)
          self.distance_mm = float((event.data.split(' '))[1])
          super().start(event)

    class CmdTurn(Turn):
      def start(self,event):
          print(event.data)
          self.angle_deg = float((event.data.split(' '))[1])
          super().start(event)

    class CmdTurnToward(TurnToward):
        def start(self,event):
            print(event.data)
            spec = event.data.split(' ')
            self.object_spec  = ''.join(spec[1:])
            print('Turning toward', self.object_spec)
            super().start(None)

    class CmdPickup(PickUp):
      def start(self,event):
          print(event.data)
          spec = event.data.split(' ')
          self.object_spec = ''.join(spec[1:])
          print('Picking up', self.object_spec)
          super().start(None)

    class CmdDrop(Drop):
      def start(self,event):
          print(event.data)
          super().start(event)

    class CmdSendCamera(SendGPTCamera):
        def start(self,event):
            print(event.data)
            super().start(event)

    class CmdSay(Say):
        def start(self,event):
            print('#say ...')
            self.text = event.data[5:]
            super().start(event)

    class CmdGlow(Glow):
        def start(self,event):
            print(f"CmdGlow:  '{event.data}'")
            spec = event.data.split(' ')
            if len(spec) != 4:
                self.args = (vex.LightType.ALL, vex.Color.TRANSPARENT)
            try:
                (r, g, b) = (int(x) for x in spec[1:])
                self.args = (vex.LightType.ALL, r, g, b)
            except:
                self.args = (vex.LightType.ALL, vex.Color.TRANSPARENT)
            super().start(event)

    class CmdTakeTurn(AskGPT):
      def start(self, event):
        print(event.data)
        print(Pot.pot)
        spec = event.data.split(' ')
        self.hole = spec[1]
        self.state = spec[2]
        self.dealer = (spec[3] == 'True')
        self.prev_action = int(spec[4])
        prev_action = "checked" if not self.prev_action else f"bet {self.prev_action}"
        if (not self.dealer and not self.prev_action) or (self.dealer and self.state == 'preflop' and not self.prev_action):
          action_txt = "You are first to act."
        else:
          action_txt = f"The other player {prev_action}."
        self.query_text = f"The betting round is {self.state}. Your cards are {self.hole}. State the pot size, which is {Pot.pot} and how much you have left in your stack, which is {Pot.stack_size}."
        self.query_text += action_txt
        if self.state == 'preflop':
          self.query_text += " Decide your betting action."
        elif self.state == 'flop':
          self.query_text += f" Take a picture of the {self.state}, list the 5 cards that the best 5-card hand that you make, and then choose your action."
        else:
          self.query_text += f"Move sideways -60, then take a picture of the {self.state}, list the 5 cards that the best 5-card hand that you make, and decide your betting action. "
        #self.query_text += "When betting, turn around 180 degrees, move forward 1, and pick up the barrels corresponding to the bet size, return to your original position, and drop the barrel. Repeat this until your bet is complete."
        self.query_text += "Do not output another #taketurn command."
        print(self.query_text)
        super().start(event)

    class CmdUpdatePot(Say):
      def start(self, event):
        spec = event.data.split(' ')
        print('updating pot')
        action = spec[1]
        bet = int(spec[2])
        state = spec[3]
        player = int(spec[4])
        Pot.update_pot(action, bet, state, player)
        self.text = f"The pot is now ${Pot.pot}."
        super().start(event)

    class CmdResetPot(Say):
      def start(self, event):
        Pot.reset_pot()
        self.text = f"The pot will reset to $3 to start the next hand."
        super().start(event)


    class CmdPlaySound(PlaySoundFile):
      def start(self, event):
        spec = event.data.split(' ')
        if spec[1] == 'W':
          self.filepath = 'cha-ching-7053.mp3'
        else:
          self.filepath = '8-bit-video-game-lose-sound-version-1-145828.mp3'
        super().start(event)

    class SpeakResponse(Say):
      def start(self,event):
        self.text = event.data
        super().start(event)

    def start(self):
        self.robot.openai_client.set_preamble(new_preamble)
        super().start()

    $setup{
      Say("Talk to me") =C=> loop

      loop: StateNode() =Hear()=> AskGPT() =OpenAITrans()=> check

      check: self.CheckResponse()
      check =D(list)=> dispatch
      check =D(str)=> self.SpeakResponse() =C=> loop

      dispatch: Iterate()
      dispatch =D(re.compile('#say '))=> self.CmdSay() =CNext=> dispatch
      dispatch =D(re.compile('#forward '))=> self.CmdForward() =CNext=> dispatch
      dispatch =D(re.compile('#sideways '))=> self.CmdSideways() =CNext=> dispatch
      dispatch =D(re.compile('#turn '))=> self.CmdTurn() =CNext=> dispatch
      dispatch =D(re.compile('#turntoward '))=> turntoward
      dispatch =D(re.compile('#drop$'))=> self.CmdDrop() =CNext=> dispatch
      dispatch =D(re.compile('#pickup '))=> pickup
      dispatch =D(re.compile('#glow '))=> self.CmdGlow() =CNext=> dispatch
      dispatch =D(re.compile('#camera$'))=> self.CmdSendCamera() =C=>
        AskGPT("Please respond to the query using the camera image.") =OpenAITrans()=> check
      dispatch =D(re.compile('#taketurn '))=> self.CmdTakeTurn() =OpenAITrans()=> check
      dispatch =D(re.compile('#playsound '))=> self.CmdPlaySound('') =CNext=> dispatch
      dispatch =D(re.compile('#updatepot '))=> self.CmdUpdatePot() =CNext=> dispatch
      dispatch =D(re.compile('#resetpot '))=> self.CmdResetPot() =CNext=> dispatch
      dispatch =D()=> Print() =Next=> dispatch
      dispatch =C=> loop

      turntoward: self.CmdTurnToward()
      turntoward =CNext=> dispatch
      turntoward =F=> StateNode() =Next=> dispatch

      pickup: self.CmdPickup()
      pickup =CNext=> dispatch
      pickup =F=> StateNode() =Next=> dispatch

      }
